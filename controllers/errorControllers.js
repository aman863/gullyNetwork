const AppError= require("./../utils/apperror");
//HANDLE ALL CAST ERRORS
const handleCastError= err =>{
     return new AppError("invalid "+err.path+" : "+err.value,404);
}
// HANDLE DUPLICATE KEYS ERROR
const handleDuplicateKeys= err =>{
     return new AppError("duplicate key value:"+ err.keyValue.name+" . please try another value",400);
}
//HANDLE VALIDATION ERROR
const handleValidationError= err =>{
     const errors= Object.values(err.errors).map(el=> el.message);

     return new AppError("invalid data input. "+errors.join(". "),400);
}
//SEND ERROR MESSAGE FOR DEVELOPMENT
const sendErrorDev=(err,res)=>{
    console.log(err);
    res.status(err.statusCode).json({
        status:err.status,
        err,
        message:err.message
    })
}
//SEND ERROR MESSAGE FOR PRODUCTION
const sendErrorProd=(err,res)=>{
    //IF ERROR IS GENERATED BY CLIENT SIDE
    
   if(err.isOperational){
       res.status(err.statusCode).json({
           status:err.status,
           message:err.message
       });
   }
//IF ERROR IS GENERATED BY SERVER SIDE 
   else{
       res.status(500).json({
           status:"fail",
           message:"internal server error"
       });
   }
}
//GLOBAL ERROR HANDLER
module.exports= (err,req,res,next)=>{
   
    err.status=err.status || "fail";
    err.statusCode= err.statusCode|| 500;
// IF DEVELOPMENT ENVIRONMENT
   if(process.env.NODE_ENV==="development"){
       sendErrorDev(err,res);
   }
   // IF PRODUCTION ENVIRONMENT
   else if(process.env.NODE_ENV==="production"){
    
    
    if(err.name==="CastError"){

        console.log("hello1223")
         err = handleCastError(err);
    }
    else if(err.code===11000){
         err= handleDuplicateKeys(err);
    }

    else if(err.name==="ValidationError"){
         err= handleValidationError(err);
    }
    // console.log(err);
    sendErrorProd(err,res);
}
}